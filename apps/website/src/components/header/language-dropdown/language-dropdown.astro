---
import { localizePath } from "astro-i18next";
import i18next, { t } from "i18next";

import { languageMapping } from "@components/header/language-dropdown/types";
import { cn } from "src/utils";

import CheckIcon from "~icons/lucide/check.svg";

const { pathname } = Astro.url;
const { class: className } = Astro.props;

const supportedLanguages = i18next.languages;
const currentLanguage = i18next.language;
---

<div class={cn("relative", className)}>
  <input type="checkbox" id="languages-dropdown" class="peer/languages-checkbox sr-only" />
  <label
    class="flex cursor-pointer rounded-md border border-base-content bg-transparent p-3 text-sm uppercase text-base-content transition-[background-color] duration-500 hover:bg-base-content hover:text-base-2 peer-checked/languages-checkbox:bg-base-content peer-checked/languages-checkbox:text-base-2 peer-focus-visible/languages-checkbox:outline peer-focus-visible/languages-checkbox:outline-orange-600 peer-focus-visible/languages-checkbox:ring peer-focus-visible/languages-checkbox:ring-base-content"
    for="languages-dropdown"
  >
    {t("language-dropdown.label")}
  </label>

  <div
    class="invisible absolute right-0 top-full flex flex-col items-center justify-center gap-3 rounded-md border border-base-content bg-base-1 p-4 opacity-0 drop-shadow-lg transition-all duration-500 ease-[cubic-bezier(0.93,0.88,0.1,0.8)] peer-checked/languages-checkbox:visible peer-checked/languages-checkbox:top-[calc(100%+0.75rem)] peer-checked/languages-checkbox:opacity-100"
  >
    {
      supportedLanguages.map((supportedLanguage: string) => {
        const href = localizePath(pathname, supportedLanguage);
        const label = languageMapping[supportedLanguage]?.label;
        const Icon = languageMapping[supportedLanguage]?.Icon;

        return (
          <a href={href} class="group/language-item flex w-full items-center justify-start gap-x-4">
            {Icon && <Icon className="h-6 w-6 rounded-full" />}
            {label && (
              <span class="relative text-base-content transition-all duration-700 before:absolute before:-bottom-0.5 before:left-0 before:h-px before:w-0 before:rounded-full before:bg-base-content before:bg-gradient-to-r before:opacity-0 before:transition-all before:duration-700 before:content-[''] group-hover/language-item:before:w-full group-hover/language-item:before:opacity-100">
                {label}
              </span>
            )}
            {supportedLanguage === currentLanguage && <CheckIcon className="h-4 w-4 text-base-content" />}
          </a>
        );
      })
    }
  </div>
</div>

<script>
  function handleClose() {
    const languagesDropdown = document.getElementById("languages-dropdown") as HTMLInputElement;

    const languagesLabel = document.querySelector("label[for=languages-dropdown]");
    if (!languagesLabel) return;

    document.addEventListener("click", (event) => {
      const { target } = event;
      if (!target) return;

      if (!languagesDropdown.contains(target as Node) && target !== languagesLabel) languagesDropdown.checked = false;
    });
  }

  handleClose();
</script>
